<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.WorkSets" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFhNaWNyb3NvZnQuVmlzdWFsQmFzaWMsIFZlcnNpb249OC4wLjAu
        MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhBQEAAAAgTWlj
        cm9zb2Z0LlZpc3VhbEJhc2ljLkNvbGxlY3Rpb24EAAAABEtleXMJS2V5c0NvdW50BlZhbHVlcwtDdWx0
        dXJlSW5mbwYABQMIIFN5c3RlbS5HbG9iYWxpemF0aW9uLkN1bHR1cmVJbmZvAgAAAAkDAAAAAAAAAAkE
        AAAACQUAAAARAwAAAAAAAAAQBAAAAAAAAAAEBQAAACBTeXN0ZW0uR2xvYmFsaXphdGlvbi5DdWx0dXJl
        SW5mbwoAAAAJY3VsdHVyZUlEDG1faXNSZWFkT25seQtjb21wYXJlSW5mbwh0ZXh0SW5mbwdudW1JbmZv
        DGRhdGVUaW1lSW5mbwhjYWxlbmRhcgZtX25hbWUKbV9kYXRhSXRlbRFtX3VzZVVzZXJPdmVycmlkZQAA
        AwMDAwMBAAAIASBTeXN0ZW0uR2xvYmFsaXphdGlvbi5Db21wYXJlSW5mbx1TeXN0ZW0uR2xvYmFsaXph
        dGlvbi5UZXh0SW5mbyVTeXN0ZW0uR2xvYmFsaXphdGlvbi5OdW1iZXJGb3JtYXRJbmZvJ1N5c3RlbS5H
        bG9iYWxpemF0aW9uLkRhdGVUaW1lRm9ybWF0SW5mbyZTeXN0ZW0uR2xvYmFsaXphdGlvbi5HcmVnb3Jp
        YW5DYWxlbmRhcggBEgQAAAEJBgAAAAkHAAAACQgAAAAJCQAAAAkKAAAABgsAAAAFa28tS1JgAAAAAQQG
        AAAAIFN5c3RlbS5HbG9iYWxpemF0aW9uLkNvbXBhcmVJbmZvAwAAAAl3aW4zMkxDSUQHY3VsdHVyZQZt
        X25hbWUAAAEICBIEAAASBAAABgwAAAAFa28tS1IEBwAAAB1TeXN0ZW0uR2xvYmFsaXphdGlvbi5UZXh0
        SW5mbwYAAAAPbV9saXN0U2VwYXJhdG9yDG1faXNSZWFkT25seRFjdXN0b21DdWx0dXJlTmFtZQttX25E
        YXRhSXRlbRFtX3VzZVVzZXJPdmVycmlkZQ1tX3dpbjMyTGFuZ0lEAQABAAAAAQgBCAYNAAAAASwBCmAA
        AAABEgQAAAQIAAAAJVN5c3RlbS5HbG9iYWxpemF0aW9uLk51bWJlckZvcm1hdEluZm8hAAAAEG51bWJl
        ckdyb3VwU2l6ZXMSY3VycmVuY3lHcm91cFNpemVzEXBlcmNlbnRHcm91cFNpemVzDHBvc2l0aXZlU2ln
        bgxuZWdhdGl2ZVNpZ24WbnVtYmVyRGVjaW1hbFNlcGFyYXRvchRudW1iZXJHcm91cFNlcGFyYXRvchZj
        dXJyZW5jeUdyb3VwU2VwYXJhdG9yGGN1cnJlbmN5RGVjaW1hbFNlcGFyYXRvcg5jdXJyZW5jeVN5bWJv
        bBJhbnNpQ3VycmVuY3lTeW1ib2wJbmFuU3ltYm9sFnBvc2l0aXZlSW5maW5pdHlTeW1ib2wWbmVnYXRp
        dmVJbmZpbml0eVN5bWJvbBdwZXJjZW50RGVjaW1hbFNlcGFyYXRvchVwZXJjZW50R3JvdXBTZXBhcmF0
        b3INcGVyY2VudFN5bWJvbA5wZXJNaWxsZVN5bWJvbAxuYXRpdmVEaWdpdHMKbV9kYXRhSXRlbRNudW1i
        ZXJEZWNpbWFsRGlnaXRzFWN1cnJlbmN5RGVjaW1hbERpZ2l0cxdjdXJyZW5jeVBvc2l0aXZlUGF0dGVy
        bhdjdXJyZW5jeU5lZ2F0aXZlUGF0dGVybhVudW1iZXJOZWdhdGl2ZVBhdHRlcm4WcGVyY2VudFBvc2l0
        aXZlUGF0dGVybhZwZXJjZW50TmVnYXRpdmVQYXR0ZXJuFHBlcmNlbnREZWNpbWFsRGlnaXRzEWRpZ2l0
        U3Vic3RpdHV0aW9uCmlzUmVhZE9ubHkRbV91c2VVc2VyT3ZlcnJpZGUVdmFsaWRGb3JQYXJzZUFzTnVt
        YmVyF3ZhbGlkRm9yUGFyc2VBc0N1cnJlbmN5BwcHAQEBAQEBAQEBAQEBAQEBBgAAAAAAAAAAAAAAAAAA
        CAgICAgICAgICAgICAEBAQEJDgAAAAkPAAAACQ4AAAAGEQAAAAErBhIAAAABLQYTAAAAAS4GFAAAAAEs
        BhUAAAABLAYWAAAAAS4GFwAAAAPigqkGGAAAAAFcBhkAAAADTmFOBhoAAAAISW5maW5pdHkGGwAAAAkt
        SW5maW5pdHkJEwAAAAkUAAAABh4AAAABJQYfAAAAA+KAsAkgAAAAAAAAAAIAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAAAAAAAAACAAAAAQAAAAEAAQEECQAAACdTeXN0ZW0uR2xvYmFsaXphdGlvbi5EYXRlVGltZUZv
        cm1hdEluZm8qAAAABm1fbmFtZRNtX2lzRGVmYXVsdENhbGVuZGFyEGJVc2VDYWxlbmRhckluZm8MYW1E
        ZXNpZ25hdG9yDHBtRGVzaWduYXRvcg1kYXRlU2VwYXJhdG9yD2xvbmdUaW1lUGF0dGVybhBzaG9ydFRp
        bWVQYXR0ZXJuF2dlbmVyYWxTaG9ydFRpbWVQYXR0ZXJuFmdlbmVyYWxMb25nVGltZVBhdHRlcm4NdGlt
        ZVNlcGFyYXRvcg9tb250aERheVBhdHRlcm4VZGF0ZVRpbWVPZmZzZXRQYXR0ZXJuFGFsbFNob3J0VGlt
        ZVBhdHRlcm5zE2FsbExvbmdUaW1lUGF0dGVybnMIY2FsZW5kYXIOZmlyc3REYXlPZldlZWsQY2FsZW5k
        YXJXZWVrUnVsZRNmdWxsRGF0ZVRpbWVQYXR0ZXJuD2xvbmdEYXRlUGF0dGVybhBzaG9ydERhdGVQYXR0
        ZXJuEHllYXJNb250aFBhdHRlcm4TYWJicmV2aWF0ZWREYXlOYW1lcxRtX3N1cGVyU2hvcnREYXlOYW1l
        cwhkYXlOYW1lcxVhYmJyZXZpYXRlZE1vbnRoTmFtZXMKbW9udGhOYW1lcxJnZW5pdGl2ZU1vbnRoTmFt
        ZXMfbV9nZW5pdGl2ZUFiYnJldmlhdGVkTW9udGhOYW1lcxJsZWFwWWVhck1vbnRoTmFtZXMUYWxsU2hv
        cnREYXRlUGF0dGVybnMTYWxsTG9uZ0RhdGVQYXR0ZXJucwptX2VyYU5hbWVzEG1fYWJicmV2RXJhTmFt
        ZXMXbV9hYmJyZXZFbmdsaXNoRXJhTmFtZXMLbV9kYXRlV29yZHMRb3B0aW9uYWxDYWxlbmRhcnMMbV9p
        c1JlYWRPbmx5C2Zvcm1hdEZsYWdzCUN1bHR1cmVJRBFtX3VzZVVzZXJPdmVycmlkZQluRGF0YUl0ZW0B
        AAABAQEBAQEBAQEBBgYDAAABAQEBBgYGBgYGBgYGBgYGBgYHAAMAAAABASZTeXN0ZW0uR2xvYmFsaXph
        dGlvbi5HcmVnb3JpYW5DYWxlbmRhcggICAEoU3lzdGVtLkdsb2JhbGl6YXRpb24uRGF0ZVRpbWVGb3Jt
        YXRGbGFncwgBCAoBAAYhAAAABuyYpOyghAYiAAAABuyYpO2bhAoGIwAAAAp0dCBoOm1tOnNzCgoKCgoK
        CgoJCgAAAAAAAAAAAAAACgYlAAAAHHl5eXkn64WEJyBNJ+yblCcgZCfsnbwnIGRkZGQGJgAAAAp5eXl5
        LU1NLWRkBicAAAAQeXl5eSfrhYQnIE0n7JuUJwoKCgoKCgoKCgoKCgoKCSgAAAABBNf///8oU3lzdGVt
        Lkdsb2JhbGl6YXRpb24uRGF0ZVRpbWVGb3JtYXRGbGFncwEAAAAHdmFsdWVfXwAI/////xIEAAABYAAA
        AAQKAAAAJlN5c3RlbS5HbG9iYWxpemF0aW9uLkdyZWdvcmlhbkNhbGVuZGFyBgAAAAZtX3R5cGURbV9j
        dXJyZW50RXJhVmFsdWUPdHdvRGlnaXRZZWFyTWF4GkNhbGVuZGFyK21fY3VycmVudEVyYVZhbHVlFUNh
        bGVuZGFyK21faXNSZWFkT25seRhDYWxlbmRhcit0d29EaWdpdFllYXJNYXgDAAAAAAArU3lzdGVtLkds
        b2JhbGl6YXRpb24uR3JlZ29yaWFuQ2FsZW5kYXJUeXBlcwgICAEIBNb///8rU3lzdGVtLkdsb2JhbGl6
        YXRpb24uR3JlZ29yaWFuQ2FsZW5kYXJUeXBlcwEAAAAHdmFsdWVfXwAIAQAAAP///////////////wH/
        ////Dw4AAAABAAAACAMAAAAPDwAAAAEAAAAIAwAAABEgAAAACgAAAAYrAAAAATAGLAAAAAExBi0AAAAB
        MgYuAAAAATMGLwAAAAE0BjAAAAABNQYxAAAAATYGMgAAAAE3BjMAAAABOAY0AAAAATkPKAAAAAMAAAAI
        AQAAAAUAAAACAAAACw==
</value>
  </data>
</root>